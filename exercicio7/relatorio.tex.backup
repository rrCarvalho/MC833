\documentclass[a4paper,10pt,oneside,final,titlepage,onecolumn]{article}

\usepackage{ucs}
\usepackage[portuguese]{babel}
\usepackage[utf8x]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{placeins}

\usepackage{listings}
\usepackage{color}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{frame=tb,
  language=bash,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  basicstyle={\scriptsize\ttfamily},
  numbers=none,  
  breaklines=true,
  breakatwhitespace=true
  tabsize=3
}



\title{Exercício 7 de MC833 --- Programação em Redes de Computadores}
\author{Raul Rabelo Carvalho, 105607, turma A}



\begin{document}



\maketitle



\section{Decisões de projeto}
\paragraph{}Para seguir a instrução do Exercício 7 de empregar \emph{wrappers} para todas as chamadas de função, foi empregado um arquivo \emph{header} comum tanto ao servidor quanto ao cliente contendo as configurações, tipos, macros e pragmas das funções \emph{wrapper} dos dois \emph{softwares}. Além deste arquivo, dois outros arquivos compõem o sistema cliente/servidor: um arquivo contendo a implementação dos \emph{wrappers} relacionados à rede e um segundo arquivo no qual são implementados todos as outras funções usadas.
\paragraph{}O cliente foi implementado para receber entradas do teclado e, mesmo no modo UDP, ele utiliza a função \verb|Connect| para simplificar a implementação.
\paragraph{}O servidor é concorrente e cria processos-filhos para atender a conexões TCP.
\subsection{Manual de uso}
\paragraph{}O sistema é compilado com o comando ``make'', quando o \verb|Makefile| suprido não foi alterado. ``make clean'' está disponível para remover os arquivos binários.
\paragraph{}O cliente deve ser executado com a seguinte linha de comando ``./cliente <PROTOCOLO> <ENDERECO_IP> <PORTA>'', sendo que o último argumento é opcional (quando a porta não é passada, a porta assumida é a 49151).
\paragraph{}O servidor deve ser executado com a seguinte linha de comando ``./servidor <PORTA>'', sendo a porta é opcional (quando a porta não é passada, a porta assumida é a 49151).


\FloatBarrier
\section{Detalhes de implementação}
\paragraph{}Primeiramente, as funções \emph{wrapper} usadas em programação de sockets na linguagem C do livro-texto foram alteradas para usar a função \verb|perror| como saída de erro; fora isso, nada mais foi alterado.
\paragraph{}No arquivo \verb|auxf.c| foram implementadas as funções usadas para tratar os argumentos do cliente e do servidor (cliArgs e srvArgs, respectivamente), coletando os dados para estabelecimento da conexao: somente a porta, no caso do servidor; e protocolo, endereço IP e porta, no caso do cliente. Estes dados são usados para preencher a estrutura \verb|sockaddr| em cada um dos programas. Além dessas duas funções, \verb|auxf.c| contém as duas funções para criação de processos-filhos e para o tratamento de processos inativos --- \verb|Fork()| e \verb|signalHandler()| respectivamente. Finalmente, há uma função de comparação que testa se uma \emph{string} contém a palavra ``exit''; esta função é usada tanto no cliente quanto no servidor para encerrar a conexão graciosamente.
\paragraph{}O arquivo \emph{header} \verb|myNetworking.h| é simples, contendo somente fazendo a inclusão das bibliotecas necessárias, definido algumas macros de configuração e os dois tipos empregados no sistema. O primeiro tipo é somente um booleano; e o segundo enumera os protocolos de transporte (TCP e UDP).
\paragraph{}O servidor de eco tem uma implementação simples e direta devido ao uso de funções \emph{wrapper}: são criados e inicializados dois \emph{sockets}, um do protocolo TCP e orientado a conexões e outro do protocolo UDP e orientado a mensagens. Usando a funçao \verb|Select|, o servidor continuamente testa se há alguma conexão a ser estabelecida ou mensagem recebida nos dois \emph{sockets} e, quando for o caso, trata o evento.
\paragraph{}Caso o \emph{socket} TCP tenha uma conexão para ser estabelecida, a conexão é aceita e uma cópia do processo é criada para atender ao cliente que pediu a conexão. O processo-filho entra em \emph{loop} recebendo e re-enviando as mensagens do cliente até ser encerrado. O processo-pai



\FloatBarrier
\section{}
\paragraph{}O código pertinente ao servidor de múltiplas conexões segue abaixo, comentado.
\begin{lstlisting}
	while(1) {
		/* aceita a conexao de um cliente por um socket novo new_s */
		if ((new_s = accept(s, (struct sockaddr *)&sin, &len)) < 0) {
			perror("simplex-talk: accept");
			exit(EXIT_FAILURE);
		}
		/* faz o fork do processo */
		child_pid = fork();
		if (child_pid < 0) {
			perror("simplex-talk: fork");
			exit(EXIT_FAILURE);
		}
		/* caso o processo seja o filho */
		if (child_pid == 0) {
			/* fecha o socket que esta' esperando por novos clientes */
			close(s);
			/* coleta as informacoes do socket e imprime na stdout */
			so_len = sizeof(so);
			if (getpeername(new_s, (struct sockaddr *)&so, &so_len) < 0) {
				perror("simplex-talk: getpeername");
				close(s);
				exit(EXIT_FAILURE);
			}
			inet_ntop(AF_INET, &(so.sin_addr), so_addr, INET_ADDRSTRLEN);
			printf("IP address: %s; Port number: %d\n", so_addr, ntohs(so.sin_port));
			/* entra em loop imprimindo as mensagens do cliente */
			while (len = recv(new_s, buf, sizeof(buf), 0)) {
				fputs(buf, stdout);
			}	
		}
		/* caso o processo seja o pai, fecha o novo socket */
		close(new_s);	
	}
\end{lstlisting}



\FloatBarrier
\section{}
\paragraph{}Segue abaixo o trecho de código a ser explicado.
\begin{lstlisting}
for (;;) {
   connfd = Accept (listenfd,...);

   if ( (pid=Fork()) == 0) {
      Close(listenfd);
      doit(connfd); // Faz alguma operacao no socket
      Close(connfd);
      exit(0);
   }
   Close(connfd);
}
\end{lstlisting}
\paragraph{}Após a execução do \verb|fork|, existem dois processos diferentes com \verb|pid|s diferentes. O processo-pai tem esta variável definida com o número do processo-filho, portanto, ele não executa o bloco do \verb|if|, vindo somente a fechar o \emph{socket} \verb|connfd| enquanto continua a aguardar novas conexões no \emph{socket} \verb|listenfd|. Já no caso do processo-filho, sua variável \verb|pid| é zero, então, o bloco do \verb|if| é executado. Dentro do bloco, o \emph{socket} \verb|listenfd| é fechado imediatamente, mas isso não afeta o funcionamento geral do sistema, já que o processo-pai continua a escutar neste \emph{socket}. O processo-filho, deste modo, ficou encarregado da conexão com o cliente pelo \emph{socket} \verb|connfd|, o qual só é encerrado depois de executar as operações desejadas pelo cliente.



\FloatBarrier
\section{}
\paragraph{}Podemos comprovar que os processos extras que o servidor cria são seus filhos usando a \emph{tree view} do programa \verb|htop|, o que é uma versão com mais recursos da ferramenta \verb|top|. Na figura \ref{htop}, vê-se que existem dois processos-filhos de um processo \verb|server| sendo executando no \emph{shell} \verb|bash| em um \verb|konsole| (terminal virtual do KDE).
\begin{figure}[!ht]
  \caption{htop mostrando os processos do servidor.}
  \centering
  \includegraphics[width=117mm]{images/htop.png}
  \label{htop}
\end{figure}



\FloatBarrier
\section{}
\paragraph{}Para verificar quais dos lados da conexão entra no estado \verb|TIME_WAIT|, foi feita uma modificação no cliente para ele este encerre a conexão após a entrada da palavra \verb|exit|. Assim, o cliente será o lado que iniciará o encerramento da conexão. O comando para verificação foi \verb|netstat -tun|.
\begin{figure}[!ht]
  \caption{Saída do netstat.}
  \centering
  \includegraphics[width=117mm]{images/netstat.png}
  \label{netstat}
\end{figure}
\paragraph{}Como visto na figura \ref{netstat}, o lado que inicia o encerramento da conexão que entra em \verb|TIME_WAIT|. Isso é condizente com a máquina de estados do protocolo TCP\footnote{Stevens, W. Richard. UNIX Network Programming. 2nd Edition, pp. 40-41}. O estado \verb|TIME_WAIT| existe garantir o encerramento adequado da conexão TCP. O cliente fica neste estado por duas vezes o MSL (\emph{maximum segment lifetime}), caso o ACK que ele enviou em resposta ao FIN do servidor (note que o cliente inciou o encerramento enviando um FIN ao servidor que foi por este respondido com um ACK seguido de un FIN) não seja entregue a este. O cliente precisa manter o estado da conexão para caso o servidor re-envie seu FIN.



\end{document}
